generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id              String             @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  name            String
  email           String             @unique
  phone           String?
  departmentId    String             @db.Uuid
  positionId      String             @db.Uuid
  roleId          Int
  hireDate        DateTime
  status          Status
  code            String             @unique
  attendances     Attendance[]
  department      Department         @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  position        Position           @relation(fields: [positionId], references: [id], onDelete: Cascade)
  role            Role               @relation(fields: [roleId], references: [id], onDelete: Cascade)
  trainings       EmployeeTraining[]
  leaves          Leave[]
  loans           Loan[]
  payrolls        Payroll[]
  reimbursements  Reimbursement[]
  userCredentials UserCredentials[]

  @@map("employee")
}

model UserCredentials {
  id         String   @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  email      String   @unique
  password   String
  employeeId String   @db.Uuid
  code       String   @unique
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("user_credentials")
}

model Department {
  id        String     @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  name      String     @unique
  employees Employee[]
  positions Position[]

  @@map("department")
}

model Position {
  id           String     @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  title        String
  departmentId String     @db.Uuid
  employees    Employee[]
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@map("position")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  employees   Employee[]
  permissions RolePermission[]

  @@map("role")
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  roles       RolePermission[]

  @@map("permission")
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permission")
}

model Attendance {
  id            String          @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  employeeId    String          @db.Uuid
  date          DateTime
  checkin       DateTime?
  checkout      DateTime?
  workDuration  Int?
  workStatus    WorkStatus?
  status        AttendanceStatus
  employee      Employee        @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("attendance")
}

model Payroll {
  id          BigInt   @id @default(autoincrement())
  employeeId  String   @db.Uuid
  basicSalary Decimal  @db.Decimal(10, 2)
  overtime    Decimal  @db.Decimal(10, 2)
  deductions  Decimal  @db.Decimal(10, 2)
  netSalary   Decimal  @db.Decimal(10, 2)
  paymentDate DateTime
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("payroll")
}

model Leave {
  id         BigInt      @id @default(autoincrement())
  employeeId String      @db.Uuid
  leaveType  String?
  startDate  DateTime
  endDate    DateTime
  status     LeaveStatus
  employee   Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("leave")
}

model Reimbursement {
  id             BigInt              @id @default(autoincrement())
  employeeId     String              @db.Uuid
  amount         Decimal             @db.Decimal(10, 2)
  category       String?
  submissionDate DateTime
  status         ReimbursementStatus
  employee       Employee            @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("reimbursement")
}

model Training {
  id          BigInt             @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  trainer     String
  employees   EmployeeTraining[]

  @@map("training")
}

model EmployeeTraining {
  id         BigInt         @id @default(autoincrement())
  employeeId String         @db.Uuid
  trainingId BigInt
  status     TrainingStatus
  employee   Employee       @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  training   Training       @relation(fields: [trainingId], references: [id], onDelete: Cascade)

  @@unique([employeeId, trainingId])
  @@map("employee_training")
}

model Loan {
  id          BigInt     @id @default(autoincrement())
  employeeId  String     @db.Uuid
  amount      Decimal    @db.Decimal(10, 2)
  loanDate    DateTime
  installment Decimal    @db.Decimal(10, 2)
  status      LoanStatus
  employee    Employee   @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("loan")
}

enum Status {
  ACTIVE
  INACTIVE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

enum WorkStatus {
  FULL_TIME
  HALF_DAY
  OVERTIME
  INSUFFICIENT
}

enum LeaveStatus {
  PENDING
  APPROVED_BY_MANAGER
  APPROVED_BY_HR
  REJECTED
}

enum ReimbursementStatus {
  PENDING
  APPROVED_BY_MANAGER
  APPROVED_BY_HR
  REJECTED
}

enum TrainingStatus {
  ONGOING
  COMPLETED
}

enum LoanStatus {
  ONGOING
  PAID
}