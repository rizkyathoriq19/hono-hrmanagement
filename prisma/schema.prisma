generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id                String              @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  name              String
  email             String              @unique
  phone             String?
  department_id     String              @db.Uuid
  position_id       String              @db.Uuid
  role_id           Int
  manager_id        String?             @db.Uuid
  hire_date         DateTime
  status            Status
  code              String              @unique
  identification_no String              @unique
  image             String?
  birth_date        DateTime
  birth_place       String?
  gender            Gender
  blood_type        BloodType?
  address           String
  village_id        BigInt
  district_id       BigInt
  city_id           BigInt
  province_id       BigInt
  country_id        BigInt
  zip_code          String
  religion          Religion
  married_status    MarriedStatus
  citizen_status    CitizenStatus
  is_active         Boolean
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())   @updatedAt
  deleted_at        DateTime?
  attendances       Attendance[]
  department        Department          @relation(fields: [department_id], references: [id], onDelete: Cascade)
  position          Position            @relation(fields: [position_id], references: [id], onDelete: Cascade)
  role              Role                @relation(fields: [role_id], references: [id], onDelete: Cascade)
  trainings         EmployeeTraining[]
  leaves            Leave[]
  loans             Loan[]
  payrolls          Payroll[]
  reimbursements    Reimbursement[]
  userCredentials   UserCredentials[]
  country           Country             @relation(fields: [country_id], references: [id], onDelete: Cascade)
  province          Province            @relation(fields: [province_id], references: [id], onDelete: Cascade)
  city              City                @relation(fields: [city_id], references: [id], onDelete: Cascade)
  district          District            @relation(fields: [district_id], references: [id], onDelete: Cascade)
  village           Village             @relation(fields: [village_id], references: [id], onDelete: Cascade)

  @@map("employee")
}

model UserCredentials {
  id         String   @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  email      String   @unique
  password   String
  employee_id String   @db.Uuid
  code       String   @unique
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())   @updatedAt
  deleted_at        DateTime?  
  employee   Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)

  @@map("user_credentials")
}

model Department {
  id        String     @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  name      String     @unique
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())   @updatedAt
  deleted_at        DateTime?  
  employees Employee[]
  positions Position[]

  @@map("department")
}

model Position {
  id           String     @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  name        String
  department_id String     @db.Uuid
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())   @updatedAt
  deleted_at        DateTime?  
  employees    Employee[]
  department   Department @relation(fields: [department_id], references: [id], onDelete: Cascade)

  @@map("position")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())   @updatedAt
  deleted_at        DateTime?  
  employees   Employee[]
  permissions RolePermission[]

  @@map("role")
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())   @updatedAt
  deleted_at        DateTime?  
  roles       RolePermission[]

  @@map("permission")
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  role_id       Int
  permission_id Int
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())   @updatedAt
  deleted_at        DateTime?  
  permission   Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([role_id, permission_id])
  @@map("role_permission")
}

model Attendance {
  id            String          @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  employee_id    String          @db.Uuid
  date          DateTime
  check_in       DateTime?
  check_out      DateTime?
  check_in_lat  Decimal?      @db.Decimal(10, 7)
  check_in_long Decimal?      @db.Decimal(10, 7)
  check_out_lat Decimal?      @db.Decimal(10, 7)
  check_out_long Decimal?      @db.Decimal(10, 7) 
  work_duration  Int?
  work_status    WorkStatus?
  status        AttendanceStatus
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())   @updatedAt
  deleted_at        DateTime?
  employee      Employee        @relation(fields: [employee_id], references: [id], onDelete: Cascade)

  @@map("attendance")
}

model Payroll {
  id          BigInt   @id @default(autoincrement())
  employee_id  String   @db.Uuid
  basic_salary Decimal  @db.Decimal(10, 2)
  overtime    Decimal  @db.Decimal(10, 2)
  deductions  Decimal  @db.Decimal(10, 2)
  net_salary   Decimal  @db.Decimal(10, 2)
  payment_date DateTime
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())   @updatedAt
  deleted_at        DateTime?  
  employee    Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)

  @@map("payroll")
}

model Leave {
  id         BigInt      @id @default(autoincrement())
  employee_id String      @db.Uuid
  leave_type  String?
  start_date  DateTime
  end_date    DateTime
  status     LeaveStatus
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())   @updatedAt
  deleted_at        DateTime?  
  employee   Employee    @relation(fields: [employee_id], references: [id], onDelete: Cascade)

  @@map("leave")
}

model Reimbursement {
  id             BigInt              @id @default(autoincrement())
  employee_id     String              @db.Uuid
  amount         Decimal             @db.Decimal(10, 2)
  category       String?
  submission_date DateTime
  status         ReimbursementStatus
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())   @updatedAt
  deleted_at        DateTime?  
  employee       Employee            @relation(fields: [employee_id], references: [id], onDelete: Cascade)

  @@map("reimbursement")
}

model Training {
  id          BigInt             @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  trainer     String
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())   @updatedAt
  deleted_at        DateTime?  
  employees   EmployeeTraining[]

  @@map("training")
}

model EmployeeTraining {
  id         BigInt         @id @default(autoincrement())
  employee_id String         @db.Uuid
  training_id BigInt
  status     TrainingStatus
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())   @updatedAt
  deleted_at        DateTime?  
  employee   Employee       @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  training   Training       @relation(fields: [training_id], references: [id], onDelete: Cascade)

  @@unique([employee_id, training_id])
  @@map("employee_training")
}

model Loan {
  id          BigInt     @id @default(autoincrement())
  employee_id  String     @db.Uuid
  amount      Decimal    @db.Decimal(10, 2)
  loan_date    DateTime
  installment Decimal    @db.Decimal(10, 2)
  status      LoanStatus
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())   @updatedAt
  deleted_at        DateTime?  
  employee    Employee   @relation(fields: [employee_id], references: [id], onDelete: Cascade)

  @@map("loan")
}

model Country {
  id          BigInt     @id @default(autoincrement())
  name        String?
  alt_name    String?
  latitude    Decimal?   @db.Decimal(10, 7)
  longitude   Decimal?   @db.Decimal(10, 7)
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())   @updatedAt
  deleted_at        DateTime?  
  employees   Employee[]
  provinces   Province[]

  @@map("country")
}

model Province {
  id          BigInt      @id @default(autoincrement())
  name        String
  alt_name    String?
  latitude    Decimal?    @db.Decimal(10, 7)
  longitude   Decimal?    @db.Decimal(10, 7)
  country_id  BigInt
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())   @updatedAt
  deleted_at        DateTime?  
  employees   Employee[]  
  cities      City[]
  country     Country     @relation(fields: [country_id], references: [id], onDelete: Cascade)

  @@map("province")
}

model City {
  id          BigInt     @id @default(autoincrement())
  name        String
  alt_name    String?
  latitude    Decimal?   @db.Decimal(10, 7)
  longitude   Decimal?   @db.Decimal(10, 7)
  province_id BigInt
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())   @updatedAt
  deleted_at        DateTime?  
  employees   Employee[]
  districts   District[]
  province    Province   @relation(fields: [province_id], references: [id], onDelete: Cascade)

  @@map("city")
}

model District {
  id          BigInt     @id @default(autoincrement())
  name        String
  alt_name    String?
  latitude    Decimal?   @db.Decimal(10, 7)
  longitude   Decimal?   @db.Decimal(10, 7)
  city_id     BigInt
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())   @updatedAt
  deleted_at        DateTime?  
  employees   Employee[]
  villages    Village[]
  city       City       @relation(fields: [city_id], references: [id], onDelete: Cascade)

  @@map("district")
}

model Village {
  id          BigInt     @id @default(autoincrement())
  name        String
  alt_name    String?
  latitude    Decimal?   @db.Decimal(10, 7)
  longitude   Decimal?   @db.Decimal(10, 7)
  district_id BigInt
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())   @updatedAt
  deleted_at        DateTime?  
  employees   Employee[]
  district    District   @relation(fields: [district_id], references: [id], onDelete: Cascade)

  @@map("village")
}

enum Status {
  ACTIVE
  INACTIVE
}

enum Gender {
  MALE
  FEMALE
}

enum BloodType {
  A
  B
  AB
  O
}

enum Religion {
  ISLAM
  CHRISTIAN
  CATHOLIC
  HINDU
  BUDDHIST
  CONFUCIAN
  OTHER
}

enum MarriedStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum CitizenStatus {
  CITIZEN
  PERMANENT_RESIDENT
  TEMPORARY_RESIDENT
  FOREIGNER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

enum WorkStatus {
  FULL_TIME
  HALF_DAY
  OVERTIME
  INSUFFICIENT
}

enum LeaveStatus {
  PENDING
  APPROVED_BY_MANAGER
  REJECTED_BY_MANAGER
  APPROVED_BY_HR
  REJECTED_BY_HR
  CANCELLED
}

enum ReimbursementStatus {
  PENDING
  APPROVED_BY_MANAGER
  REJECTED_BY_MANAGER
  APPROVED_BY_HR
  REJECTED_BY_HR
  CANCELLED
}

enum TrainingStatus {
  ONGOING
  COMPLETED
}

enum LoanStatus {
  ONGOING
  PAID
}